// This is an autogenerated file from Firebase Studio.

'use server';
/**
 * @fileOverview A flow that allows users to slim or add muscle to a photo of a person using AI by providing a text prompt describing the desired transformation.
 *
 * - bodyReshaping - A function that handles the body reshaping process.
 * - BodyReshapingInput - The input type for the bodyReshaping function.
 * - BodyReshapingOutput - The return type for the bodyReshaping function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const BodyReshapingInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a person, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  transformationPrompt: z.string().describe('A description of the desired body transformation.'),
});
export type BodyReshapingInput = z.infer<typeof BodyReshapingInputSchema>;

const BodyReshapingOutputSchema = z.object({
  transformedPhotoDataUri: z
    .string()
    .describe('The transformed photo as a data URI.'),
});
export type BodyReshapingOutput = z.infer<typeof BodyReshapingOutputSchema>;

export async function bodyReshaping(input: BodyReshapingInput): Promise<BodyReshapingOutput> {
  return bodyReshapingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'bodyReshapingPrompt',
  input: {schema: BodyReshapingInputSchema},
  output: {schema: BodyReshapingOutputSchema},
  prompt: `You are an AI image transformation expert. Transform the body in the given photo based on the user's description.

Transformation Description: {{{transformationPrompt}}}
Photo: {{media url=photoDataUri}}

Ensure the output is a valid data URI for the transformed image.
`, // Ensure valid data URI
});

const bodyReshapingFlow = ai.defineFlow(
  {
    name: 'bodyReshapingFlow',
    inputSchema: BodyReshapingInputSchema,
    outputSchema: BodyReshapingOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: [
        {media: {url: input.photoDataUri}},
        {text: input.transformationPrompt},
      ],
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });
    return {transformedPhotoDataUri: media.url!};
  }
);
